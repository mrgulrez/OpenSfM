# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/geometry:pygeometry_stubgen
# @generated
#
# Tip: Be sure to run this with the build mode you use for your project, e.g.,
# @//arvr/mode/linux/opt (or dev) in arvr.
#
# Ignore errors for [24] untyped generics.
# pyre-ignore-all-errors[24]

import numpy
from typing import *

__all__ = [
    "Camera",
    "CameraParameters",
    "Pose",
    "ProjectionType",
    "Similarity",
    "absolute_pose_n_points",
    "absolute_pose_n_points_known_rotation",
    "absolute_pose_three_points",
    "compute_camera_mapping",
    "epipolar_angle_two_bearings_many",
    "essential_five_points",
    "essential_n_points",
    "point_refinement",
    "relative_pose_from_essential",
    "relative_pose_refinement",
    "relative_rotation_n_points",
    "triangulate_bearings_dlt",
    "triangulate_bearings_midpoint",
    "triangulate_two_bearings_midpoint",
    "triangulate_two_bearings_midpoint_many",
    "BROWN",
    "DUAL",
    "FISHEYE",
    "FISHEYE62",
    "FISHEYE624",
    "FISHEYE_OPENCV",
    "PERSPECTIVE",
    "RADIAL",
    "SIMPLE_RADIAL",
    "SPHERICAL",
    "aspect_ratio",
    "cx",
    "cy",
    "focal",
    "k1",
    "k2",
    "k3",
    "k4",
    "k5",
    "k6",
    "none",
    "p1",
    "p2",
    "s0",
    "s1",
    "s2",
    "s3",
    "transition",
]

class Camera:
    def __copy__(self) -> Camera: ...
    def __deepcopy__(self, arg0: dict) -> Camera: ...
    def __getstate__(self) -> tuple: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    @staticmethod
    def create_brown(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: numpy.typing.NDArray
    ) -> Camera: ...
    @staticmethod
    def create_dual(arg0: float, arg1: float, arg2: float, arg3: float) -> Camera: ...
    @staticmethod
    def create_fisheye(arg0: float, arg1: float, arg2: float) -> Camera: ...
    @staticmethod
    def create_fisheye62(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: numpy.typing.NDArray
    ) -> Camera: ...
    @staticmethod
    def create_fisheye624(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: numpy.typing.NDArray
    ) -> Camera: ...
    @staticmethod
    def create_fisheye_opencv(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: numpy.typing.NDArray
    ) -> Camera: ...
    @staticmethod
    def create_perspective(arg0: float, arg1: float, arg2: float) -> Camera: ...
    @staticmethod
    def create_radial(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: numpy.typing.NDArray
    ) -> Camera: ...
    @staticmethod
    def create_simple_radial(
        arg0: float, arg1: float, arg2: numpy.typing.NDArray, arg3: float
    ) -> Camera: ...
    @staticmethod
    def create_spherical() -> Camera: ...
    def get_K(self) -> numpy.typing.NDArray: ...
    def get_K_in_pixel_coordinates(
        self, arg0: int, arg1: int
    ) -> numpy.typing.NDArray: ...
    def get_parameters_map(self) -> dict[CameraParameters, float]: ...
    def get_parameters_types(self) -> list[CameraParameters]: ...
    def get_parameters_values(self) -> numpy.typing.NDArray: ...
    @staticmethod
    def is_panorama(arg0: str) -> bool: ...
    def normalized_to_pixel_coordinates(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    @staticmethod
    def normalized_to_pixel_coordinates_common(
        arg0: numpy.typing.NDArray, arg1: int, arg2: int
    ) -> numpy.typing.NDArray: ...
    def normalized_to_pixel_coordinates_many(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    @staticmethod
    def normalized_to_pixel_coordinates_many_common(
        arg0: numpy.typing.NDArray, arg1: int, arg2: int
    ) -> numpy.typing.NDArray: ...
    def pixel_bearing(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    def pixel_bearing_many(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    def pixel_to_normalized_coordinates(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    @staticmethod
    def pixel_to_normalized_coordinates_common(
        arg0: numpy.typing.NDArray, arg1: int, arg2: int
    ) -> numpy.typing.NDArray: ...
    def pixel_to_normalized_coordinates_many(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    @staticmethod
    def pixel_to_normalized_coordinates_many_common(
        arg0: numpy.typing.NDArray, arg1: int, arg2: int
    ) -> numpy.typing.NDArray: ...
    def project(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    def project_many(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    def set_parameter_value(self, arg0: CameraParameters, arg1: float) -> None: ...
    def set_parameters_values(self, arg0: numpy.typing.NDArray) -> None: ...
    @property
    def aspect_ratio(self) -> float: ...
    @aspect_ratio.setter
    def aspect_ratio(self, arg1: float) -> None: ...
    @property
    def distortion(self) -> numpy.typing.NDArray: ...
    @distortion.setter
    def distortion(self, arg1: numpy.typing.NDArray) -> None: ...
    @property
    def focal(self) -> float: ...
    @focal.setter
    def focal(self, arg1: float) -> None: ...
    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, arg0: int) -> None: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, arg0: str) -> None: ...
    @property
    def k1(self) -> float: ...
    @property
    def k2(self) -> float: ...
    @property
    def k3(self) -> float: ...
    @property
    def k4(self) -> float: ...
    @property
    def k5(self) -> float: ...
    @property
    def k6(self) -> float: ...
    @property
    def p1(self) -> float: ...
    @property
    def p2(self) -> float: ...
    @property
    def principal_point(self) -> numpy.typing.NDArray: ...
    @principal_point.setter
    def principal_point(self, arg1: numpy.typing.NDArray) -> None: ...
    @property
    def projection_type(self) -> str: ...
    @property
    def s0(self) -> float: ...
    @property
    def s1(self) -> float: ...
    @property
    def s2(self) -> float: ...
    @property
    def s3(self) -> float: ...
    @property
    def transition(self) -> float: ...
    @transition.setter
    def transition(self, arg1: float) -> None: ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, arg0: int) -> None: ...

class CameraParameters:
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    focal: "CameraParameters"
    aspect_ratio: "CameraParameters"
    k1: "CameraParameters"
    k2: "CameraParameters"
    k3: "CameraParameters"
    k4: "CameraParameters"
    k5: "CameraParameters"
    k6: "CameraParameters"
    p1: "CameraParameters"
    p2: "CameraParameters"
    s0: "CameraParameters"
    s1: "CameraParameters"
    s2: "CameraParameters"
    s3: "CameraParameters"
    cx: "CameraParameters"
    cy: "CameraParameters"
    transition: "CameraParameters"
    none: "CameraParameters"
    __members__: Dict[str, "CameraParameters"]
    __entries: "dict"

class Pose:
    def __copy__(self) -> Pose: ...
    def __deepcopy__(self, arg0: dict) -> Pose: ...
    def __getstate__(self) -> tuple: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.typing.NDArray) -> None: ...
    @overload
    def __init__(self, rotation: numpy.typing.NDArray) -> None: ...
    @overload
    def __init__(
        self, rotation: numpy.typing.NDArray, translation: numpy.typing.NDArray
    ) -> Union[None, None]: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    def compose(self, arg0: Pose) -> Pose: ...
    def get_R_cam_to_world(self) -> numpy.typing.NDArray: ...
    def get_R_cam_to_world_min(self) -> numpy.typing.NDArray: ...
    def get_R_world_to_cam(self) -> numpy.typing.NDArray: ...
    def get_R_world_to_cam_min(self) -> numpy.typing.NDArray: ...
    def get_Rt(self) -> numpy.typing.NDArray: ...
    def get_cam_to_world(self) -> numpy.typing.NDArray: ...
    def get_origin(self) -> numpy.typing.NDArray: ...
    def get_rotation_matrix(self) -> numpy.typing.NDArray: ...
    def get_t_cam_to_world(self) -> numpy.typing.NDArray: ...
    def get_t_world_to_cam(self) -> numpy.typing.NDArray: ...
    def get_world_to_cam(self) -> numpy.typing.NDArray: ...
    def inverse(self) -> Pose: ...
    def is_identity(self, arg0: float) -> bool: ...
    def relative_to(self, arg0: Pose) -> Pose: ...
    @overload
    def set_from_cam_to_world(self, arg0: numpy.typing.NDArray) -> None: ...
    @overload
    def set_from_cam_to_world(
        self, arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
    ) -> Union[None, None]: ...
    @overload
    def set_from_world_to_cam(self, arg0: numpy.typing.NDArray) -> None: ...
    @overload
    def set_from_world_to_cam(
        self, arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
    ) -> Union[None, None]: ...
    def set_origin(self, arg0: numpy.typing.NDArray) -> None: ...
    def set_rotation_matrix(self, arg0: numpy.typing.NDArray) -> None: ...
    def transform(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    def transform_inverse(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    def transform_inverse_many(
        self, arg0: numpy.typing.NDArray
    ) -> numpy.typing.NDArray: ...
    def transform_many(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    @property
    def rotation(self) -> numpy.typing.NDArray: ...
    @rotation.setter
    def rotation(self, arg1: numpy.typing.NDArray) -> None: ...
    @property
    def translation(self) -> numpy.typing.NDArray: ...
    @translation.setter
    def translation(self, arg1: numpy.typing.NDArray) -> None: ...

class ProjectionType:
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    PERSPECTIVE: "ProjectionType"
    BROWN: "ProjectionType"
    FISHEYE: "ProjectionType"
    FISHEYE_OPENCV: "ProjectionType"
    FISHEYE62: "ProjectionType"
    FISHEYE624: "ProjectionType"
    DUAL: "ProjectionType"
    SPHERICAL: "ProjectionType"
    RADIAL: "ProjectionType"
    SIMPLE_RADIAL: "ProjectionType"
    __members__: Dict[str, "ProjectionType"]
    __entries: "dict"

class Similarity:
    def __init__(
        self, arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray, arg2: float
    ) -> None: ...
    def get_rotation_matrix(self) -> numpy.typing.NDArray: ...
    def inverse(self) -> Similarity: ...
    def transform(self, arg0: numpy.typing.NDArray) -> numpy.typing.NDArray: ...
    @property
    def rotation(self) -> numpy.typing.NDArray: ...
    @rotation.setter
    def rotation(self, arg1: numpy.typing.NDArray) -> None: ...
    @property
    def scale(self) -> float: ...
    @scale.setter
    def scale(self, arg1: float) -> None: ...
    @property
    def translation(self) -> numpy.typing.NDArray: ...
    @translation.setter
    def translation(self, arg1: numpy.typing.NDArray) -> None: ...

def absolute_pose_n_points(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> numpy.typing.NDArray: ...
def absolute_pose_n_points_known_rotation(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> numpy.typing.NDArray: ...
def absolute_pose_three_points(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> list[numpy.typing.NDArray]: ...
def compute_camera_mapping(
    arg0: Camera, arg1: Camera, arg2: int, arg3: int
) -> tuple[numpy.typing.NDArray, numpy.typing.NDArray]: ...
def epipolar_angle_two_bearings_many(
    arg0: numpy.typing.NDArray,
    arg1: numpy.typing.NDArray,
    arg2: numpy.typing.NDArray,
    arg3: numpy.typing.NDArray,
) -> numpy.typing.NDArray: ...
def essential_five_points(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> list[numpy.typing.NDArray]: ...
def essential_n_points(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> list[numpy.typing.NDArray]: ...
def point_refinement(
    arg0: numpy.typing.NDArray,
    arg1: numpy.typing.NDArray,
    arg2: numpy.typing.NDArray,
    arg3: int,
) -> numpy.typing.NDArray: ...
def relative_pose_from_essential(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray, arg2: numpy.typing.NDArray
) -> numpy.typing.NDArray: ...
def relative_pose_refinement(
    arg0: numpy.typing.NDArray,
    arg1: numpy.typing.NDArray,
    arg2: numpy.typing.NDArray,
    arg3: int,
) -> numpy.typing.NDArray: ...
def relative_rotation_n_points(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> numpy.typing.NDArray: ...
def triangulate_bearings_dlt(
    arg0: list[numpy.typing.NDArray],
    arg1: numpy.typing.NDArray,
    arg2: float,
    arg3: float,
    arg4: float,
) -> tuple[bool, numpy.typing.NDArray]: ...
def triangulate_bearings_midpoint(
    arg0: numpy.typing.NDArray,
    arg1: numpy.typing.NDArray,
    arg2: list[float],
    arg3: float,
    arg4: float,
) -> tuple[bool, numpy.typing.NDArray]: ...
def triangulate_two_bearings_midpoint(
    arg0: numpy.typing.NDArray, arg1: numpy.typing.NDArray
) -> tuple[bool, numpy.typing.NDArray]: ...
def triangulate_two_bearings_midpoint_many(
    arg0: numpy.typing.NDArray,
    arg1: numpy.typing.NDArray,
    arg2: numpy.typing.NDArray,
    arg3: numpy.typing.NDArray,
) -> list[tuple[bool, numpy.typing.NDArray]]: ...

BROWN: "ProjectionType"
DUAL: "ProjectionType"
FISHEYE: "ProjectionType"
FISHEYE62: "ProjectionType"
FISHEYE624: "ProjectionType"
FISHEYE_OPENCV: "ProjectionType"
PERSPECTIVE: "ProjectionType"
RADIAL: "ProjectionType"
SIMPLE_RADIAL: "ProjectionType"
SPHERICAL: "ProjectionType"
aspect_ratio: "CameraParameters"
cx: "CameraParameters"
cy: "CameraParameters"
focal: "CameraParameters"
k1: "CameraParameters"
k2: "CameraParameters"
k3: "CameraParameters"
k4: "CameraParameters"
k5: "CameraParameters"
k6: "CameraParameters"
none: "CameraParameters"
p1: "CameraParameters"
p2: "CameraParameters"
s0: "CameraParameters"
s1: "CameraParameters"
s2: "CameraParameters"
s3: "CameraParameters"
transition: "CameraParameters"
